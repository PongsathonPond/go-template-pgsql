// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	inout "idev-cms-service/service/authen/inout"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Login provides a mock function with given fields: ctx, input
func (_m *Service) Login(ctx context.Context, input *inout.LoginInput) (*inout.UserViewWithToken, error) {
	ret := _m.Called(ctx, input)

	var r0 *inout.UserViewWithToken
	if rf, ok := ret.Get(0).(func(context.Context, *inout.LoginInput) *inout.UserViewWithToken); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inout.UserViewWithToken)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *inout.LoginInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logout provides a mock function with given fields: ctx, input
func (_m *Service) Logout(ctx context.Context, input *inout.LogoutInput) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *inout.LogoutInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyTokens provides a mock function with given fields: ctx, token
func (_m *Service) VerifyTokens(ctx context.Context, token *string) *inout.VerifyTokenResponse {
	ret := _m.Called(ctx, token)

	var r0 *inout.VerifyTokenResponse
	if rf, ok := ret.Get(0).(func(context.Context, *string) *inout.VerifyTokenResponse); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inout.VerifyTokenResponse)
		}
	}

	return r0
}
