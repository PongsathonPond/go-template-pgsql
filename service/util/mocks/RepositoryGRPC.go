// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	grpc "google.golang.org/grpc"

	net "net"
)

// RepositoryGRPC is an autogenerated mock type for the RepositoryGRPC type
type RepositoryGRPC struct {
	mock.Mock
}

// NewClient provides a mock function with given fields:
func (_m *RepositoryGRPC) NewClient() (*grpc.ClientConn, error) {
	ret := _m.Called()

	var r0 *grpc.ClientConn
	if rf, ok := ret.Get(0).(func() *grpc.ClientConn); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.ClientConn)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewServer provides a mock function with given fields:
func (_m *RepositoryGRPC) NewServer() (*grpc.Server, net.Listener, error) {
	ret := _m.Called()

	var r0 *grpc.Server
	if rf, ok := ret.Get(0).(func() *grpc.Server); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grpc.Server)
		}
	}

	var r1 net.Listener
	if rf, ok := ret.Get(1).(func() net.Listener); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(net.Listener)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func() error); ok {
		r2 = rf()
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
