// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	domain "idev-cms-service/domain"
	inout "idev-cms-service/service/roles/inout"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// All provides a mock function with given fields: ctx, input
func (_m *Service) All(ctx context.Context, input *inout.RoleAllInput) ([]*inout.RolesAllView, error) {
	ret := _m.Called(ctx, input)

	var r0 []*inout.RolesAllView
	if rf, ok := ret.Get(0).(func(context.Context, *inout.RoleAllInput) []*inout.RolesAllView); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*inout.RolesAllView)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *inout.RoleAllInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckPermission provides a mock function with given fields: ctx, input
func (_m *Service) CheckPermission(ctx context.Context, input *inout.CheckPermissionInput) bool {
	ret := _m.Called(ctx, input)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *inout.CheckPermissionInput) bool); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, input
func (_m *Service) Create(ctx context.Context, input *inout.RoleCreateInput) (string, error) {
	ret := _m.Called(ctx, input)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *inout.RoleCreateInput) string); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *inout.RoleCreateInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, input
func (_m *Service) Delete(ctx context.Context, input *inout.RoleDeleteInput) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *inout.RoleDeleteInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserPermission provides a mock function with given fields: ctx, token
func (_m *Service) GetUserPermission(ctx context.Context, token string) ([]*inout.MenuPermissionView, error) {
	ret := _m.Called(ctx, token)

	var r0 []*inout.MenuPermissionView
	if rf, ok := ret.Get(0).(func(context.Context, string) []*inout.MenuPermissionView); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*inout.MenuPermissionView)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, opt
func (_m *Service) List(ctx context.Context, opt *domain.PageOption) (int, []*inout.RolesListView, error) {
	ret := _m.Called(ctx, opt)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PageOption) int); ok {
		r0 = rf(ctx, opt)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 []*inout.RolesListView
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PageOption) []*inout.RolesListView); ok {
		r1 = rf(ctx, opt)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*inout.RolesListView)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *domain.PageOption) error); ok {
		r2 = rf(ctx, opt)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Read provides a mock function with given fields: ctx, input
func (_m *Service) Read(ctx context.Context, input *inout.RoleReadInput) (*inout.RoleReadView, error) {
	ret := _m.Called(ctx, input)

	var r0 *inout.RoleReadView
	if rf, ok := ret.Get(0).(func(context.Context, *inout.RoleReadInput) *inout.RoleReadView); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inout.RoleReadView)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *inout.RoleReadInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, input
func (_m *Service) Update(ctx context.Context, input *inout.RoleUpdateInput) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *inout.RoleUpdateInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
