// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	inout "idev-cms-service/service/tokens/inout"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// GetUserIDByToken provides a mock function with given fields: ctx, token
func (_m *Service) GetUserIDByToken(ctx context.Context, token *string) string {
	ret := _m.Called(ctx, token)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *string) string); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RefreshToken provides a mock function with given fields: ctx, input
func (_m *Service) RefreshToken(ctx context.Context, input *inout.RefreshTokenInput) (*inout.RefreshTokenView, error) {
	ret := _m.Called(ctx, input)

	var r0 *inout.RefreshTokenView
	if rf, ok := ret.Get(0).(func(context.Context, *inout.RefreshTokenInput) *inout.RefreshTokenView); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inout.RefreshTokenView)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *inout.RefreshTokenInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokeToken provides a mock function with given fields: ctx, input
func (_m *Service) RevokeToken(ctx context.Context, input *inout.RevokeTokenInput) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *inout.RevokeTokenInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RevokeTokenByUserId provides a mock function with given fields: ctx, userID
func (_m *Service) RevokeTokenByUserId(ctx context.Context, userID *string) error {
	ret := _m.Called(ctx, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *string) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
