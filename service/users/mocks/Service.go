// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	domain "idev-cms-service/domain"
	inout "idev-cms-service/service/users/inout"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Activate provides a mock function with given fields: ctx, input
func (_m *Service) Activate(ctx context.Context, input *inout.UserActivateInput) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *inout.UserActivateInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CheckEmailExist provides a mock function with given fields: ctx, email
func (_m *Service) CheckEmailExist(ctx context.Context, email *string) error {
	ret := _m.Called(ctx, email)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *string) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CountByRole provides a mock function with given fields: ctx, input
func (_m *Service) CountByRole(ctx context.Context, input *inout.CountByRoleInput) (int, error) {
	ret := _m.Called(ctx, input)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, *inout.CountByRoleInput) int); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *inout.CountByRoleInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, input
func (_m *Service) Create(ctx context.Context, input *inout.UserCreateInput) (string, error) {
	ret := _m.Called(ctx, input)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, *inout.UserCreateInput) string); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *inout.UserCreateInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, input
func (_m *Service) Delete(ctx context.Context, input *inout.UserDeleteInput) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *inout.UserDeleteInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMe provides a mock function with given fields: ctx, input
func (_m *Service) GetMe(ctx context.Context, input *inout.GetMeInput) (*inout.MeView, error) {
	ret := _m.Called(ctx, input)

	var r0 *inout.MeView
	if rf, ok := ret.Get(0).(func(context.Context, *inout.GetMeInput) *inout.MeView); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inout.MeView)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *inout.GetMeInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, opt
func (_m *Service) List(ctx context.Context, opt *domain.PageOption) (int, []*inout.UserReadView, error) {
	ret := _m.Called(ctx, opt)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, *domain.PageOption) int); ok {
		r0 = rf(ctx, opt)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 []*inout.UserReadView
	if rf, ok := ret.Get(1).(func(context.Context, *domain.PageOption) []*inout.UserReadView); ok {
		r1 = rf(ctx, opt)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]*inout.UserReadView)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *domain.PageOption) error); ok {
		r2 = rf(ctx, opt)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Read provides a mock function with given fields: ctx, input
func (_m *Service) Read(ctx context.Context, input *inout.ReadInput) (*inout.UserReadView, error) {
	ret := _m.Called(ctx, input)

	var r0 *inout.UserReadView
	if rf, ok := ret.Get(0).(func(context.Context, *inout.ReadInput) *inout.UserReadView); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inout.UserReadView)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *inout.ReadInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadByToken provides a mock function with given fields: ctx, token
func (_m *Service) ReadByToken(ctx context.Context, token *string) (*inout.UserViewByToken, error) {
	ret := _m.Called(ctx, token)

	var r0 *inout.UserViewByToken
	if rf, ok := ret.Get(0).(func(context.Context, *string) *inout.UserViewByToken); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inout.UserViewByToken)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadGRPC provides a mock function with given fields: ctx, input
func (_m *Service) ReadGRPC(ctx context.Context, input *inout.ReadInput) (*inout.UserViewGRPC, error) {
	ret := _m.Called(ctx, input)

	var r0 *inout.UserViewGRPC
	if rf, ok := ret.Get(0).(func(context.Context, *inout.ReadInput) *inout.UserViewGRPC); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inout.UserViewGRPC)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *inout.ReadInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResendActivate provides a mock function with given fields: ctx, input
func (_m *Service) ResendActivate(ctx context.Context, input *inout.ResendActivateInput) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *inout.ResendActivateInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetVerify provides a mock function with given fields: ctx, input
func (_m *Service) SetVerify(ctx context.Context, input *inout.SetVerifyInput) (*inout.SetVerifyResponse, error) {
	ret := _m.Called(ctx, input)

	var r0 *inout.SetVerifyResponse
	if rf, ok := ret.Get(0).(func(context.Context, *inout.SetVerifyInput) *inout.SetVerifyResponse); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*inout.SetVerifyResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *inout.SetVerifyInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, input
func (_m *Service) Update(ctx context.Context, input *inout.UserUpdateInput) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *inout.UserUpdateInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMe provides a mock function with given fields: ctx, input
func (_m *Service) UpdateMe(ctx context.Context, input *inout.ProfileUpdateInput) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *inout.ProfileUpdateInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePassword provides a mock function with given fields: ctx, input
func (_m *Service) UpdatePassword(ctx context.Context, input *inout.UserUpdatePasswordInput) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *inout.UserUpdatePasswordInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserChangePassword provides a mock function with given fields: ctx, input
func (_m *Service) UserChangePassword(ctx context.Context, input *inout.UserChangePasswordInput) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *inout.UserChangePasswordInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VerifyActivateToken provides a mock function with given fields: ctx, input
func (_m *Service) VerifyActivateToken(ctx context.Context, input *inout.VerifyActivateTokenInput) error {
	ret := _m.Called(ctx, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *inout.VerifyActivateTokenInput) error); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
